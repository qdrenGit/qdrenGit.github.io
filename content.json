{"pages":[{"title":"about","text":"tags: test","link":"/about/index.html"},{"title":"test03","text":"asd asd adsa s 测试测上","link":"/about/tset.html"}],"posts":[{"title":"SpringBoot集成Excel导入导出","text":"SpringBoot 集成Excel导入导出因为之后会使用到注解对实体类进行判断,所以导入validation 1. 首先导入依赖 123456789101112&lt;!-- excel依赖 --&gt;&lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;easyexcel&lt;/artifactId&gt; &lt;version&gt;2.2.4&lt;/version&gt;&lt;/dependency&gt;&lt;!-- 验证依赖 --&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-validation&lt;/artifactId&gt;&lt;/dependency&gt; 2.实体类1234567891011121314151617181920212223@Data@NoArgsConstructor@AllArgsConstructorpublic class UserExcelModel extends BaseRowModel implements Serializable { /* * 通过validation的注解,对参数进行判断 * */ @NotBlank(message = &quot;手机号不能为空&quot;) @Size(max = 4) @ExcelProperty(value = &quot;用户名&quot;, index = 0) private String name; @ExcelProperty(value = &quot;年龄&quot;, index = 1) private Integer age; @Pattern(regexp = &quot;^[1][3,4,5,7,8][0-9]{9}$$&quot;, message = &quot;手机号不合法&quot;) @NotBlank(message = &quot;手机号不能为空&quot;) @ExcelProperty(value = &quot;手机号&quot;, index = 2) private String mobile; @ExcelProperty(value = &quot;性别&quot;, index = 3) private String sex;} 3. 验证utils1234567891011121314/** 验证utils* */public class ValidationUtils { public static Validator getValidator(){ return validator; } static Validator validator; static{ ValidatorFactory validatorFactory = Validation.buildDefaultValidatorFactory(); validator=validatorFactory.getValidator(); }} 4.Vo12345678910/*无论从excel列表中导入成败与否 都需要进行存储 * */@Datapublic class UserExcelVo { //导入成功列表 private List&lt;UserExcelModel&gt; success; //导入失败列表 private List&lt;UserExcelModel&gt; fail;} 5.Controller123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198/** excel表格导入导出，条件判断示例* */@RestController@RequestMapping(&quot;/user&quot;)public class UserController { /** * 下载Excel模板 */ @GetMapping(&quot;/downloadTemplate&quot;) public void downloadTemplate(HttpServletResponse response) throws Exception { //获取类路径资源 --resources目录下 ClassPathResource classPathResource = new ClassPathResource(&quot;excelTemplate/easyexcel.xlsx&quot;); //获取输入流 InputStream inputStream = classPathResource.getInputStream(); //当文件后缀名为xls时 使用HSSF //Workbook workbook = new HSSFWorkbook(inputStream); //当文件后缀名为xlsx时 使用XSSF XSSFWorkbook sheets = new XSSFWorkbook(inputStream); //设置内容类型 response.setContentType(&quot;application/vnd.ms-excel&quot;); //设置请求头 response.setHeader(&quot;content-Disposition&quot;, &quot;attachment;filename=&quot; + URLEncoder.encode(&quot;easyexcel.xlsx&quot;, &quot;utf-8&quot;)); response.setHeader(&quot;Access-Control-Expose-Headers&quot;, &quot;content-Disposition&quot;); //获得输出流 OutputStream outputStream = response.getOutputStream(); //写入响应流 sheets.write(outputStream); outputStream.flush(); outputStream.close(); } /** * 导出数据 */ @GetMapping(&quot;/exportData&quot;) public void exportData(HttpServletResponse response) throws Exception { XSSFWorkbook workbook = new XSSFWorkbook(); //列名 String []columnNames = {&quot;用户名&quot;,&quot;年龄&quot;,&quot;手机号&quot;,&quot;性别&quot;}; //创建工作表 Sheet sheet = workbook.createSheet(); //创建字体 Font titleFont = workbook.createFont(); //设置字体名称 titleFont.setFontName(&quot;simsun&quot;); //是否加粗 titleFont.setBold(true); //选择颜色 titleFont.setColor(IndexedColors.BLACK.index); //创建单元样式 XSSFCellStyle titleStyle = workbook.createCellStyle(); //设置对齐 titleStyle.setAlignment(HorizontalAlignment.CENTER); //设置垂直对齐 titleStyle.setVerticalAlignment(VerticalAlignment.CENTER); //设置填充图案 titleStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND); //设置填充前景色 titleStyle.setFillForegroundColor(IndexedColors.YELLOW.index); //设置字体 titleStyle.setFont(titleFont); //设置行 Row titleRow = sheet.createRow(0); for (int i = 0; i &lt; columnNames.length; i++) { //根据列名创建单元 Cell cell = titleRow.createCell(i); //设置单元格值 cell.setCellValue(columnNames[i]); //设置单元格样式 cell.setCellStyle(titleStyle); } //此处可以编写sql逻辑 //模拟构造数据 List&lt;UserExcelModel&gt; dataList = new ArrayList&lt;&gt;(); dataList.add(new UserExcelModel(&quot;张三&quot;,12,&quot;13867098765&quot;,&quot;男&quot;)); dataList.add(new UserExcelModel(&quot;张三1&quot;,12,&quot;13867098765&quot;,&quot;男&quot;)); dataList.add(new UserExcelModel(&quot;张三2&quot;,12,&quot;13867098765&quot;,&quot;男&quot;)); dataList.add(new UserExcelModel(&quot;张三3&quot;,12,&quot;13867098765&quot;,&quot;男&quot;)); //创建数据行并写入值 for (int j = 0; j &lt; dataList.size(); j++) { //获取模型 UserExcelModel userExcelModel = dataList.get(j); //获取最后一行 int lastRowNum = sheet.getLastRowNum(); //创建行 Row dataRow = sheet.createRow(lastRowNum + 1); dataRow.createCell(0).setCellValue(userExcelModel.getName()); dataRow.createCell(1).setCellValue(userExcelModel.getAge()); dataRow.createCell(2).setCellValue(userExcelModel.getMobile()); dataRow.createCell(3).setCellValue(userExcelModel.getSex()); } //设置请求头 response.setContentType(&quot;application/vnd.ms-excel&quot;); response.setHeader(&quot;content-Disposition&quot;, &quot;attachment;filename=&quot; + URLEncoder.encode(&quot;easyexcel.xls&quot;, &quot;utf-8&quot;)); response.setHeader(&quot;Access-Control-Expose-Headers&quot;, &quot;content-Disposition&quot;); //响应流 OutputStream outputStream = response.getOutputStream(); workbook.write(outputStream); outputStream.flush(); outputStream.close(); } /* * 导入excel表格 结合postMan,post请求导入 * */ @PostMapping(&quot;/readExcel&quot;) public List&lt;UserExcelModel&gt; readExcel(@RequestParam(&quot;file&quot;) MultipartFile file){ List&lt;UserExcelModel&gt; list = new ArrayList&lt;&gt;(); try { list = EasyExcel.read(file.getInputStream(),UserExcelModel.class,new ModelExcelListener()).sheet().doReadSync(); } catch (IOException e) { e.printStackTrace(); } return list; } /* * 导入excel表格 1.0 （根据字段进行校验，多字段不推荐） * */ @PostMapping(&quot;/importExcel&quot;) public UserExcelVo importExcel(@RequestParam(&quot;file&quot;) MultipartFile file){ List&lt;UserExcelModel&gt; list = null; //失败列表（排除使用） List&lt;UserExcelModel&gt; fail = new ArrayList&lt;&gt;(); UserExcelVo userExcelVO = new UserExcelVo(); //判断手机正则 String mobieReg = &quot;^[1][3,4,5,7,8][0-9]{9}$$&quot;; try { //读取到excel中的数据 list = EasyExcel.read(file.getInputStream(),UserExcelModel.class,new ModelExcelListener()).sheet().doReadSync(); //进行循环 list.forEach(data-&gt;{ //处理姓名的校验 if(StringUtils.isEmpty(data.getName())||data.getName().length()&gt; 4 ){ fail.add(data); return; } //处理手机号的校验 if (StringUtils.isEmpty(data.getMobile())|| !data.getMobile().matches(mobieReg)) { fail.add(data); return; } //以下根据字段多少可能有n个if }); //将失败列表存入vo userExcelVO.setFail(fail); //list中将失败列表排除 list.removeAll(fail); //排除之后，存入成功列表中 userExcelVO.setSuccess(list); } catch (IOException e) { e.printStackTrace(); } return userExcelVO; } /* * 导入excel表格 2.0 通过Validation进行验证省去了IF ELSE 的写法 * * * */ @PostMapping(&quot;/v2/importExcel&quot;) public UserExcelVo importExcelV2(@RequestParam(&quot;file&quot;) MultipartFile file){ List&lt;UserExcelModel&gt; list = null; //失败列表 List&lt;UserExcelModel&gt; fail = new ArrayList&lt;&gt;(); //VO UserExcelVo userExcelVO = new UserExcelVo(); try { //从excel中读取参数 list = EasyExcel.read(file.getInputStream(),UserExcelModel.class,new ModelExcelListener()).sheet().doReadSync(); //参数进行循环 list.forEach(data-&gt;{ //通过Validator获取到所有错误 Set&lt;ConstraintViolation&lt;UserExcelModel&gt;&gt; violations = ValidationUtils.getValidator().validate(data); //只要验证集合violations（包含错误的集合）有值时，就添加。 if(violations.size()&gt;0){ fail.add(data); } }); //进行筛选排除 userExcelVO.setFail(fail); list.removeAll(fail); userExcelVO.setSuccess(list); } catch (IOException e) { e.printStackTrace(); } return userExcelVO; }}","link":"/posts/4482f1c9.html"},{"title":"SpringBoot集成MybatisPlus","text":"SpringBoot集成myBatisPlus首先需要导入在POM.xml 文件中导入依赖 1. 导入依赖 1234567891011121314151617181920212223242526272829303132333435&lt;!-- mybatis plus --&gt;&lt;dependency&gt; &lt;groupId&gt;com.baomidou&lt;/groupId&gt; &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt; &lt;version&gt;3.0.5&lt;/version&gt;&lt;/dependency&gt;&lt;!--数据库驱动--&gt;&lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt;&lt;/dependency&gt;&lt;!-- 代码生成--&gt;&lt;dependency&gt; &lt;groupId&gt;com.baomidou&lt;/groupId&gt; &lt;artifactId&gt;mybatis-plus-generator&lt;/artifactId&gt; &lt;version&gt;3.4.1&lt;/version&gt;&lt;/dependency&gt;&lt;!--默认模板引擎 可自定义--&gt;&lt;dependency&gt; &lt;groupId&gt;org.apache.velocity&lt;/groupId&gt; &lt;artifactId&gt;velocity-engine-core&lt;/artifactId&gt; &lt;version&gt;2.1&lt;/version&gt;&lt;/dependency&gt;&lt;!-- web--&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&lt;/dependency&gt;&lt;!--lombok--&gt;&lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt;&lt;/dependency&gt; 2. StudentController1234567891011121314151617181920212223242526272829303132@RestController@RequestMapping(&quot;/glp/student&quot;)public class StudentController { @Autowired private StudentService studentService; @RequestMapping(&quot;/findAll&quot;) public List&lt;Student&gt; findAll(){ //参数一current：当前页 参数二size：页面大小 Page&lt;Student&gt; page = new Page&lt;&gt;(1,2); studentService.page(page,null); List&lt;Student&gt; records = page.getRecords(); return records; } /* * 批量插入 * */ @RequestMapping(&quot;/saveList&quot;) public boolean saveAll(){ List&lt;Student&gt; studentList = new ArrayList&lt;&gt;(); Student student = new Student(); student.setName(&quot;赵四&quot;); studentList.add(student); return studentService.saveBatch(studentList); } /* * 更多示例 * https://www.cnblogs.com/l-y-h/p/12859477.html * */} 3. StudentServiceMybatisPlus中基础的CRUD已经构建完毕,直接使用即可 123public interface StudentService extends IService&lt;Student&gt; {} 4.StudentServiceImpl1234@Servicepublic class StudentServiceImpl extends ServiceImpl&lt;StudentMapper, Student&gt; implements StudentService {} 5.StudentMapper1234public interface StudentMapper extends BaseMapper&lt;Student&gt; {} 6.Mapper123456&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;mapper namespace=&quot;com.qdren.glp.mapper.StudentMapper&quot;&gt;&lt;/mapper&gt; 7.启动类1234567891011@SpringBootApplication//mapper扫描的路径@MapperScan(&quot;com.qdren.glp.mapper&quot;) public class DemoApplication { public static void main(String[] args) { SpringApplication.run(DemoApplication.class, args); }} 最后为了使用Druid连接池，需要在application.yml下配置： 1234567891011# 应用名称spring.application.name=demo# 应用服务 WEB 访问端口server.port=8881#数据库连接配置spring.datasource.username=rootspring.datasource.password=111111#mysql5~8 驱动不同driver-class-name 8需要增加时区的配置serverTimezone=UTC#useSSL=false 安全连接 # 首先是端口 /数据库表名 / 时区设置 / 字符编码spring.datasource.url=jdbc:mysql://localhost:3306/test?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver","link":"/posts/3c0a9a43.html"},{"title":"photo","text":"","link":"/posts/14b78418.html"},{"title":"SpringBoot集成Logback日志","text":"SpringBoot 集成Logback日志首先同样添加日志依赖 1.引入依赖12345&lt;!--logback--&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-logging&lt;/artifactId&gt;&lt;/dependency&gt; 2. 日志级别说明日志级别从低到高分为TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL，如果设置为WARN，则低于WARN的信息都不会输出。 Spring Boot中默认配置ERROR、WARN和INFO级别的日志输出到控制台。您还可以通过启动您的应用程序–debug标志来启用“调试”模式（开发的时候推荐开启）,以下两种方式皆可： 在运行命令后加入–debug标志，如：$ java -jar springTest.jar --debug。 在application.properties中配置debug=true，该属性置为true的时候，核心Logger（包含嵌入式容器、hibernate、spring）会输出更多内容，但是你自己应用的日志并不会输出为DEBUG级别。 3.文件输出默认情况下，Spring Boot将日志输出到控制台，不会写到日志文件。如果要编写除控制台输出之外的日志文件，则需在application.properties中设置logging.file或logging.path属性。 logging.file，设置文件，可以是绝对路径，也可以是相对路径。如：logging.file=my.log。 logging.path，设置目录，会在该目录下创建spring.log文件，并写入日志内容，如：logging.path=/var/log。 如果只配置 logging.file，会在项目的当前路径下生成一个 xxx.log 日志文件。 如果只配置 logging.path，在 /var/log文件夹生成一个日志文件为 spring.log。 如以下代码片段: 12345678910111213141516 &lt;/appender&gt; &lt;!--该配置为logging.File,输出到文件(默认输出到项目目录下)--&gt; &lt;appender name=&quot;file&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt; &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;&lt;!-- 定义了日志的切分方式——把每一天的日志归档到一个文件中，--&gt; &lt;fileNamePattern&gt;./logs/qdren.%d{yyyy-MM-dd}.log&lt;/fileNamePattern&gt;&lt;!-- 最多存储多少天--&gt; &lt;maxHistory&gt;30&lt;/maxHistory&gt;&lt;!-- 最大储存的容量 --&gt; &lt;totalSizeCap&gt;1GB&lt;/totalSizeCap&gt; &lt;/rollingPolicy&gt;&lt;!-- 日志的写入格式 时间 名称 线程 日志等级等 --&gt; &lt;encoder&gt; &lt;pattern&gt;%d{HH:mm:ss.SSS} %contextName [%thread] %-5level %logger{36} - %msg%n&lt;/pattern&gt; &lt;/encoder&gt; &lt;/appender&gt; 4.自定义日志 在resources目录下创建名称为logback-spring.xml文件 全部内容如下: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!--scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。--&gt;&lt;configuration scan=&quot;true&quot; scanPeriod=&quot;60 seconds&quot; debug=&quot;false&quot;&gt; &lt;!--设置上下文名称--&gt; &lt;contextName&gt;logback&lt;/contextName&gt; &lt;!--输出到控制台--&gt; &lt;!-- appender用来格式化日志输出节点，有俩个属性name和class。class用来指定哪种输出策略， 常用就是控制台输出策略和文件输出策略。 这个是输出到控制台--&gt; &lt;appender name=&quot;console&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt; &lt;!--&lt;encoder&gt;表示对日志进行编码：--&gt; &lt;encoder&gt; &lt;pattern&gt;%d{HH:mm:ss.SSS} %contextName [%thread] %-5level %logger{36} - %msg%n&lt;/pattern&gt; &lt;/encoder&gt; &lt;!--ThresholdFilter为系统定义的拦截器，例如我们用ThresholdFilter来过滤掉ERROR级别以下的日志不输出到文件中。 如果不用记得注释掉，不然你控制台会发现没日志~--&gt;&lt;!-- &lt;filter class=&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;&gt;--&gt;&lt;!-- &lt;level&gt;info&lt;/level&gt;--&gt;&lt;!-- &lt;/filter&gt;--&gt; &lt;/appender&gt; &lt;!--这个是输出到文件(默认输出到项目目录下)--&gt; &lt;appender name=&quot;file&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt; &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;&lt;!-- 定义了日志的切分方式——把每一天的日志归档到一个文件中，--&gt; &lt;fileNamePattern&gt;./logs/qdren.%d{yyyy-MM-dd}.log&lt;/fileNamePattern&gt;&lt;!-- 最多存30天--&gt; &lt;maxHistory&gt;30&lt;/maxHistory&gt;&lt;!-- 最大1GB--&gt; &lt;totalSizeCap&gt;1GB&lt;/totalSizeCap&gt; &lt;/rollingPolicy&gt;&lt;!-- 日志格式--&gt; &lt;encoder&gt; &lt;pattern&gt;%d{HH:mm:ss.SSS} %contextName [%thread] %-5level %logger{36} - %msg%n&lt;/pattern&gt; &lt;/encoder&gt; &lt;/appender&gt;&lt;!-- 用来指定最基础的日志输出级别，只有一个level属性。--&gt; &lt;root level=&quot;info&quot;&gt; &lt;!-- 两个不同的appender都使用这个输出级别--&gt; &lt;appender-ref ref=&quot;console&quot; /&gt; &lt;appender-ref ref=&quot;file&quot; /&gt; &lt;/root&gt;&lt;!-- 用来设置某一个包或者具体的某一个类的日志打印级别、以及指定appender additivity是否向上级logger传递打印信息。默认是true。如打印sql,就需要将Mapper中的Level 改为Debug --&gt; &lt;logger name=&quot;com.qdren.mapper&quot; level=&quot;DEBUG&quot; additivity=&quot;false&quot;&gt; &lt;appender-ref ref=&quot;console&quot; /&gt; &lt;/logger&gt;&lt;/configuration&gt; 5. Contorller1234567891011121314@RestController@RequestMapping(&quot;/log&quot;)public class LogController { private Logger logger = LoggerFactory.getLogger(this.getClass()); @RequestMapping(value = &quot;/login&quot;) public void login(HttpServletRequest request, HttpServletResponse response) { //日志级别从低到高分为TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL，如果设置为WARN，则低于WARN的信息都不会输出。 logger.trace(&quot;日志输出 trace&quot;); logger.debug(&quot;日志输出 debug&quot;); logger.info(&quot;日志输出 info&quot;); logger.warn(&quot;日志输出 warn&quot;); logger.error(&quot;日志输出 error&quot;); }} 文件是否输入成功,在项目目录下查看","link":"/posts/2ca95f81.html"}],"tags":[{"name":"Excel","slug":"Excel","link":"/tags/Excel/"},{"name":"SpringBoot","slug":"SpringBoot","link":"/tags/SpringBoot/"},{"name":"Java","slug":"Java","link":"/tags/Java/"},{"name":"Logback","slug":"Logback","link":"/tags/Logback/"}],"categories":[]}